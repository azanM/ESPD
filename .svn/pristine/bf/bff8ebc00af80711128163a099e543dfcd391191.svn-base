using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Reflection;
using System.Linq;
using System.Web;
using System.Net.Configuration;
using System.Configuration;
using System.Threading;
using System.Threading.Tasks;

namespace eSPD.Core
{
    public static class EmailCore
    {
        public static SmtpSection section = (SmtpSection)ConfigurationManager.GetSection("system.net/mailSettings/smtp");
        public static void SendMail(string toAddress, string ccAddress, string bccAddress, string subject, string body)
        {
            ccAddress = !string.IsNullOrEmpty(ccAddress) ? ccAddress.Replace(',', ';') : "";

            //backround process
            new Thread(() =>
            {
                Thread.CurrentThread.IsBackground = true;

                // kode background proses
                using (var mail = BuildMessageWithAsync(section.From, toAddress.Replace(',', ';'), ccAddress, bccAddress.Replace(',', ';'), subject, body))
                {
                    SendMail(mail.Result);
                }

            }).Start();

            // proses langsung (ngga rekomen, bikin lemot)
            //using (MailMessage mail = BuildMessageWith(section.From, toAddress.Replace(',', ';'), ccAddress, bccAddress.Replace(',', ';'), subject, body))
            //{
            //    SendMail(mail);
            //}
        }

        public static void SendMail(MailMessage mail)
        {
            try
            {
                using (var smtpClient = new SmtpClient())
                {
                    smtpClient.Send(mail);
                }

            }
            catch (Exception e)
            {
                // sebenernya bisa di masukin ke database, dan cek pake skeduler, trus di resend.
                string path = @"E:\SPD\ErrorMail\ErrorSendMail_" + DateTime.Now.ToString("dd_MMM_yyyy") + ".txt";
                if (!File.Exists(path))
                {
                    (new FileInfo(path)).Directory.Create();
                    using (TextWriter tw = new StreamWriter(path))
                    {
                        tw.WriteLine(mail.Subject + "|" + e.ToString() + Environment.NewLine);
                        tw.Close();
                    }
                }
                else
                {
                    using (StreamWriter tw = File.AppendText(path))
                    {
                        tw.WriteLine(mail.Subject + "|" + e.ToString() + Environment.NewLine);
                        tw.Close();
                    }
                }
            }
        }
        //build a mail message
        private static MailMessage BuildMessageWith(string fromAddress, string toAddress, string ccAddress, string bccAddress, string subject, string body)
        {
            MailMessage message = new MailMessage
            {
                Sender = new MailAddress(section.From), // on Behave of When From differs
                From = new MailAddress(section.From),
                Subject = subject,
                Body = body,
                IsBodyHtml = true,
            };

            string[] tos = toAddress.Split(';');
            foreach (string to in tos)
            {
                message.To.Add(new MailAddress(to));
            }

            if (!string.IsNullOrEmpty(ccAddress))
            {
                string[] ccs = ccAddress.Split(';');
                foreach (string cc in ccs)
                {
                    message.CC.Add(new MailAddress(cc));
                }
            }

            string[] bccs = bccAddress.Split(';');
            foreach (string bcc in bccs)
            {
                message.Bcc.Add(new MailAddress(bcc));
            }

            return message;
        }
        //build a mail message async
        private static Task<MailMessage> BuildMessageWithAsync(string fromAddress, string toAddress, string ccAddress, string bccAddress, string subject, string body)
        {
            var task = new Task<MailMessage>(() =>
            {
                MailMessage message = new MailMessage
                {
                    Sender = new MailAddress(section.From), // on Behave of When From differs
                    From = new MailAddress(section.From),
                    Subject = subject,
                    Body = body,
                    IsBodyHtml = true,
                };

                string[] tos = toAddress.Split(';');
                foreach (string to in tos)
                {
                    message.To.Add(new MailAddress(to));
                }

                if (!string.IsNullOrEmpty(ccAddress))
                {
                    string[] ccs = ccAddress.Split(';');
                    foreach (string cc in ccs)
                    {
                        message.CC.Add(new MailAddress(cc));
                    }
                }

                string[] bccs = bccAddress.Split(';');
                foreach (string bcc in bccs)
                {
                    message.Bcc.Add(new MailAddress(bcc));
                }

                return message;
            });

            task.Start();
            return task;
        }
        // read the text in template file and return it as a string
        private static string ReadFileFrom(string templateName)
        {
            string filePath = System.Web.HttpContext.Current.Server.MapPath("~/EmailTemplate/" + templateName);

            string body = File.ReadAllText(filePath);

            return body;
        }
        // get the template body, cache it and return the text
        private static string GetMailBodyOfTemplate(string templateName)
        {
            string cacheKey = string.Concat("mailTemplate:", templateName);
            string body;
            body = (string)System.Web.HttpContext.Current.Cache[cacheKey];
            if (string.IsNullOrEmpty(body))
            {
                //read template file text
                body = ReadFileFrom(templateName);

                if (!string.IsNullOrEmpty(body))
                {
                    System.Web.HttpContext.Current.Cache.Insert(cacheKey, body, null, DateTime.Now.AddHours(1), System.Web.Caching.Cache.NoSlidingExpiration);
                }
            }

            return body;
        }
        // replace the tokens in template body with corresponding values
        public static string PrepareMailBodyWith(string templateName, object param)
        {
            string body = GetMailBodyOfTemplate(templateName);

            Type myType = param.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties());

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(param, null);
                object propName = prop.Name;

                try
                {
                    string propertyReplace = "|" + propName.ToString() + "|";
                    string propertyValueReplace = propValue == null ? "" : propValue.ToString();


                    if (body.Contains(propertyReplace))
                    {
                        body = body.Replace(propertyReplace, propertyValueReplace);
                    }
                }
                catch (Exception ex)
                {
                    string errot = ex.ToString();
                }
            }

            return body;
        }

        public static void sendEmail(
            string nrpApproval,
            string subject,
            string tamplate,
            trSPD spd,
            string totalClaim,
            string claimApprove,
            string statusClaim,
            string urltarget)
        {
            dsSPDDataContext ctx = new dsSPDDataContext();
            //informasi approver
            var approval = ctx.msKaryawans.FirstOrDefault(o => o.nrp == nrpApproval);

            //informasi requestor
            var karyawan = ctx.msKaryawans.FirstOrDefault(o => o.nrp == spd.nrp);

            var informasiApproval = ctx.ApprovalStatus.Where(o => o.NoSPD == spd.noSPD);

            string trtd = string.Empty;

            foreach (var item in informasiApproval.OrderBy(o => o.IndexLevel))
            {
                string statusApp = "Belum diapprove";

                if (item.Status != null)
                {
                    if (item.Status.Value == true) statusApp = "Approved";
                    else statusApp = "Rejected";
                };

                var modifiedDate = item.ModifiedDate != null ? item.ModifiedDate.Value.ToString("dd MMMM yyyy HH:mm") : "-";
                trtd +=
                    "<tr>" +
                        "<td>" + item.IndexLevel.ToString() + "</td>" +
                        "<td>" + item.ApprovalRule.Deskripsi + "</td>" +
                        "<td>" + item.Nama + "</td>" +
                        "<td>" + modifiedDate + "</td>" +
                        "<td>" + statusApp + "</td>" +
                    "</tr>";

            };

            var tamplatesSPD = "<table><tr><th>No</th><th colspan='3' style='text-align:center;'>Detail Data</th><th>Status</th></tr>" + trtd + "</table>";


            EspdEmail espdEmail = new EspdEmail();

            //encrypt nrp
            espdEmail.nCrypt = Encrypto.Encrypt(nrpApproval);

            //encrypt email
            string toAddress = "";
            if (spd.nrp.Equals("99999999"))
            {
                espdEmail.eCrypt = Encrypto.Encrypt(string.IsNullOrEmpty(spd.email) ? "" : spd.email);
                if (tamplate.ToLower().Contains("informasi"))
                    toAddress = string.IsNullOrEmpty(spd.email) ? "" : spd.email;
                else toAddress = approval.email;
            }
            else
            {
                espdEmail.eCrypt = Encrypto.Encrypt(approval.email);
                toAddress = approval.email;
            }

            //encrypt nospd
            espdEmail.sCrypt = Encrypto.Encrypt(spd.noSPD);

            espdEmail.NoSPD = spd.noSPD;
            espdEmail.approverName = approval.namaLengkap;
            //espdEmail.indexApproval = approval.IndexLevel == null ? "0" : approval.IndexLevel.ToString();

            espdEmail.spdRequester = spd.namaLengkap;
            espdEmail.nrpRequester = spd.nrp;
            espdEmail.statusName = (string.IsNullOrEmpty(statusClaim) == true ? spd.status : statusClaim);
            espdEmail.noHp = spd.NoHP;
            espdEmail.jabatan = spd.jabatan;
            espdEmail.organisasiUnit = karyawan.organisasiUnit;
            espdEmail.companyCode = karyawan.companyCode;
            espdEmail.personalArea = karyawan.personelArea;
            espdEmail.personelSubArea = karyawan.pSubArea;
            espdEmail.costCenterPembebanan = spd.costCenter;
            espdEmail.tempatTujuan = !string.IsNullOrEmpty(spd.tempatTujuanLain) ? spd.Tujuan + " - " + spd.tempatTujuanLain : spd.Tujuan + " - " + spd.companyCodeTujuan + " - " + spd.personelAreaTujuan + " - " + spd.pSubAreaTujuan;
            espdEmail.keperluan = spd.msKeperluan.keperluan + " - " + spd.ketKeperluan;
            espdEmail.tanggalBerangkat = spd.tglBerangkat.ToString("dd MMMM yyyy");
            espdEmail.jamBerangkat = spd.jamBerangkat;
            espdEmail.menitBerangkat = spd.menitBerangkat;
            espdEmail.tanggalKembali = spd.tglKembali.ToString("dd MMMM yyyy");
            espdEmail.jamKembali = spd.jamKembali;
            espdEmail.menitKembali = spd.menitKembali;
            espdEmail.angkutan = spd.idAngkutan != null ? spd.msAngkutan.nama : spd.angkutanLain;
            espdEmail.hotel = spd.penginapan;

            espdEmail.spdStatusList = tamplatesSPD;

            espdEmail.alasan = spd.Alasan;
            try
            {
                TimeSpan Jumlahhari = spd.tglKembali - spd.tglBerangkat;
                espdEmail.totalDays = Jumlahhari.Days.ToString();
            }
            catch (Exception)
            {
                espdEmail.totalDays = "Undetected, may be old";
            }

            espdEmail.totalClaim = totalClaim;
            espdEmail.claimApprove = claimApprove;

            string urlSource =
                "?nCrypt=" + espdEmail.nCrypt +
                "&eCrypt=" + espdEmail.eCrypt +
                "&sCrypt=" + espdEmail.sCrypt +
                "&ClaimApprove=" + espdEmail.claimApprove +
                "&Action=";

            //string urlAction = HttpContext.Current.Request.Url.AbsoluteUri.Replace(url, "/SPD/" + urltarget + ".ashx") + urlSource;
            //string urlAction = "http://trac39/SPD/" + urltarget + ".ashx" + urlSource;
            //string urlActionExternal = "http://118.97.80.12/SPD/" + urltarget + ".ashx" + urlSource;

            //debug only
            //
            //string url = HttpContext.Current.Request.Url.PathAndQuery;
            //string urlAction = HttpContext.Current.Request.Url.AbsoluteUri.Replace(url, "/" + urltarget + ".ashx") + urlSource;
            //string urlActionExternal = HttpContext.Current.Request.Url.AbsoluteUri.Replace(url, "/" + urltarget + ".ashx") + urlSource;
            //espdEmail.DetailURL = HttpContext.Current.Request.Url.AbsoluteUri.Replace(url, "/" + "newFormRequestDetail.aspx?encrypt=") + Encrypto.Encrypt(spd.noSPD);

            string urlAction = "http://trac39/SPD/" + urltarget + ".ashx" + urlSource;
            string urlActionExternal = "http://118.97.80.12/SPD/" + urltarget + ".ashx" + urlSource;
            string url = HttpContext.Current.Request.Url.PathAndQuery;
            espdEmail.DetailURL = "http://118.97.80.12/SPD/" + "newFormRequestDetail.aspx?encrypt=" + espdEmail.sCrypt;
            //

            espdEmail.ApproveUrl = urlAction + Encrypto.Encrypt("approve");
            espdEmail.RejectUrl = urlAction + Encrypto.Encrypt("reject");
            espdEmail.ApproveUrlExternal = urlActionExternal + Encrypto.Encrypt("approve");
            espdEmail.RejectUrlExternal = urlActionExternal + Encrypto.Encrypt("reject");

            //send to requestor and approval
            string body = EmailCore.PrepareMailBodyWith(tamplate, espdEmail);


            //cc
            string ccAddress = "";
            if (toAddress.ToLower() == "kumaraguru@sera.astra.co.id")
            {
                ccAddress = "erna.stafitri@sera.astra.co.id,stefanie@sera.astra.co.id";
            }

            if (toAddress.ToLower() == "yosafat.siregar@sera.astra.co.id")
            {
                ccAddress = "nenden.safitri@sera.astra.co.id";
            }

            if (toAddress.ToLower() == "edi.gunawan@sera.astra.co.id")
            {
                ccAddress = "erna.stafitri@sera.astra.co.id,stefanie@sera.astra.co.id";
            }

            ////for date 16-Maret-2015 till 20-Maret-2015
            if (toAddress.ToLower() == "yudas.tadeus@sera.astra.co.id")
            {
                toAddress = "yoana.fransiska@sera.astra.co.id";
            }

            // bcc emasuri, eko saptono, espddeveloper
            string bccAddress = "eko.saptono@sera.astra.co.id,emma.suri@sera.astra.co.id,espddeveloper@gmail.com";

            ////////for development  
            //toAddress = "ix.habibi@gmail.com,iansuryana@gmail.com,farika.maharani@sera.astra.co.id";
            //ccAddress = "ix.habibi@gmail.com,iansuryana@gmail.com,farika.maharani@sera.astra.co.id";
            //bccAddress = "ix.habibi@gmail.com,iansuryana@gmail.com,farika.maharani@sera.astra.co.id";
            ////////end for development


            //for production
            EmailCore.SendMail(toAddress, ccAddress, bccAddress, subject, body);
            //end for production

        }

        public static void sendEmailNew(
          string nrpApproval,
          string subject,
          string tamplate,
          trSPD spd,
          string totalClaim,
          string claimApprove,
          string statusClaim,
          string urltarget,
          string indexLevel)
        {
            dsSPDDataContext ctx = new dsSPDDataContext();
            //informasi approver
            var approval = ctx.msKaryawans.FirstOrDefault(o => o.nrp == nrpApproval);

            //informasi requestor
            var karyawan = ctx.msKaryawans.FirstOrDefault(o => o.nrp == spd.nrp);

            var informasiApproval = ctx.ApprovalStatus.Where(o => o.NoSPD == spd.noSPD);

            string trtd = string.Empty;

            foreach (var item in informasiApproval.OrderBy(o => o.IndexLevel))
            {
                string statusApp = "Belum diapprove";

                if (item.Status != null)
                {
                    if (item.Status.Value == true) statusApp = "Approved";
                    else statusApp = "Rejected";
                };

                var modifiedDate = item.ModifiedDate != null ? item.ModifiedDate.Value.ToString("dd MMMM yyyy HH:mm") : "-";
                trtd +=
                    "<tr>" +
                        "<td>" + item.IndexLevel.ToString() + "</td>" +
                        "<td>" + item.ApprovalRule.Deskripsi + "</td>" +
                        "<td>" + item.Nama + "</td>" +
                        "<td>" + modifiedDate + "</td>" +
                        "<td>" + statusApp + "</td>" +
                    "</tr>";

            };

            var tamplatesSPD = "<table><tr><th>No</th><th colspan='3' style='text-align:center;'>Detail Data</th><th>Status</th></tr>" + trtd + "</table>";


            EspdEmail espdEmail = new EspdEmail();

            //encrypt nrp
            espdEmail.nCrypt = Encrypto.Encrypt(nrpApproval);

            //encrypt email
            string toAddress = "";
            if (spd.nrp.Equals("99999999"))
            {
                espdEmail.eCrypt = Encrypto.Encrypt(string.IsNullOrEmpty(spd.email) ? "" : spd.email);
                if (tamplate.ToLower().Contains("informasi"))
                    toAddress = string.IsNullOrEmpty(spd.email) ? "" : spd.email;
                else toAddress = approval.email;
            }
            else
            {
                espdEmail.eCrypt = Encrypto.Encrypt(approval.email);
                toAddress = approval.email;
            }

            //encrypt nospd
            espdEmail.sCrypt = Encrypto.Encrypt(spd.noSPD);

            espdEmail.NoSPD = spd.noSPD;
            espdEmail.approverName = approval.namaLengkap;

            espdEmail.spdRequester = spd.namaLengkap;
            espdEmail.nrpRequester = spd.nrp;
            espdEmail.statusName = (string.IsNullOrEmpty(statusClaim) == true ? spd.status : statusClaim);
            espdEmail.noHp = spd.NoHP;
            espdEmail.jabatan = spd.jabatan;
            espdEmail.organisasiUnit = karyawan.organisasiUnit;
            espdEmail.companyCode = karyawan.companyCode;
            espdEmail.personalArea = karyawan.personelArea;
            espdEmail.personelSubArea = karyawan.pSubArea;
            espdEmail.costCenterPembebanan = spd.costCenter;
            espdEmail.tempatTujuan = !string.IsNullOrEmpty(spd.tempatTujuanLain) ? spd.Tujuan + " - " + spd.tempatTujuanLain : spd.Tujuan + " - " + spd.companyCodeTujuan + " - " + spd.personelAreaTujuan + " - " + spd.pSubAreaTujuan;
            espdEmail.keperluan = spd.msKeperluan.keperluan + " - " + spd.ketKeperluan;
            espdEmail.tanggalBerangkat = spd.tglBerangkat.ToString("dd MMMM yyyy");
            espdEmail.jamBerangkat = spd.jamBerangkat;
            espdEmail.menitBerangkat = spd.menitBerangkat;
            espdEmail.tanggalKembali = spd.tglKembali.ToString("dd MMMM yyyy");
            espdEmail.jamKembali = spd.jamKembali;
            espdEmail.menitKembali = spd.menitKembali;
            espdEmail.angkutan = spd.idAngkutan != null ? spd.msAngkutan.nama : spd.angkutanLain;
            espdEmail.hotel = spd.penginapan;

            espdEmail.spdStatusList = tamplatesSPD;

            espdEmail.totalClaim = totalClaim;
            espdEmail.claimApprove = claimApprove;
            espdEmail.alasan = spd.Alasan;
            try
            {
                TimeSpan Jumlahhari = spd.tglKembali - spd.tglBerangkat;
                espdEmail.totalDays = Jumlahhari.Days.ToString();
            }
            catch (Exception)
            {
                espdEmail.totalDays = "Undetected";
            }


            string urlSource =
                "?nCrypt=" + espdEmail.nCrypt +
                "&eCrypt=" + espdEmail.eCrypt +
                "&sCrypt=" + espdEmail.sCrypt +
                "&ClaimApprove=" + espdEmail.claimApprove +
                "&index=" + indexLevel +
                "&Action=";

            //string urlAction = HttpContext.Current.Request.Url.AbsoluteUri.Replace(url, "/SPD/" + urltarget + ".ashx") + urlSource;
            //string urlAction = "http://trac39/SPD/" + urltarget + ".ashx" + urlSource;
            //string urlActionExternal = "http://118.97.80.12/SPD/" + urltarget + ".ashx" + urlSource;

            //debug only
            //
            //string url = HttpContext.Current.Request.Url.PathAndQuery;
            //string urlAction = HttpContext.Current.Request.Url.AbsoluteUri.Replace(url, "/" + urltarget + ".ashx") + urlSource;
            //string urlActionExternal = HttpContext.Current.Request.Url.AbsoluteUri.Replace(url, "/" + urltarget + ".ashx") + urlSource;
            //espdEmail.DetailURL = HttpContext.Current.Request.Url.AbsoluteUri.Replace(url, "/newFormRequestDetail.aspx?encrypt=" + espdEmail.sCrypt); 
            //


            string urlAction = "http://trac39/SPD/" + urltarget + ".ashx" + urlSource;
            string urlActionExternal = "http://118.97.80.12/SPD/" + urltarget + ".ashx" + urlSource;
            espdEmail.DetailURL = "http://118.97.80.12/SPD/" + "newFormRequestDetail.aspx?encrypt=" + espdEmail.sCrypt;

            espdEmail.ApproveUrl = urlAction + Encrypto.Encrypt("approve");
            espdEmail.RejectUrl = urlAction + Encrypto.Encrypt("reject");
            espdEmail.ApproveUrlExternal = urlActionExternal + Encrypto.Encrypt("approve");
            espdEmail.RejectUrlExternal = urlActionExternal + Encrypto.Encrypt("reject");

            //send to requestor and approval
            string body = EmailCore.PrepareMailBodyWith(tamplate, espdEmail);


            //cc
            string ccAddress = "";
            if (toAddress.ToLower() == "kumaraguru@sera.astra.co.id")
            {
                ccAddress = "erna.stafitri@sera.astra.co.id,stefanie@sera.astra.co.id";
            }

            if (toAddress.ToLower() == "yosafat.siregar@sera.astra.co.id")
            {
                ccAddress = "nenden.safitri@sera.astra.co.id";
            }

            if (toAddress.ToLower() == "edi.gunawan@sera.astra.co.id")
            {
                ccAddress = "erna.stafitri@sera.astra.co.id,stefanie@sera.astra.co.id";
            }

            //for date 16-Maret-2015 till 20-Maret-2015
            if (toAddress.ToLower() == "yudas.tadeus@sera.astra.co.id")
            {
                toAddress = "yoana.fransiska@sera.astra.co.id";
            }

            // bcc emasuri, eko saptono, espddeveloper
            string bccAddress = "eko.saptono@sera.astra.co.id,emma.suri@sera.astra.co.id,espddeveloper@gmail.com";

            ////////for development
            //toAddress = "ix.habibi@gmail.com,iansuryana@gmail.com,farika.maharani@sera.astra.co.id";
            //ccAddress = "ix.habibi@gmail.com,iansuryana@gmail.com,farika.maharani@sera.astra.co.id";
            //bccAddress = "ix.habibi@gmail.com,iansuryana@gmail.com,farika.maharani@sera.astra.co.id";
            ////////end for development


            //for production
            EmailCore.SendMail(toAddress, ccAddress, bccAddress, subject, body);
            //end for production

        }

        #region send Email new
        public static void InformasiSPDCancelAtasanLangsungOrAtasanTujuanTemplate(string p1, string p2, trSPD dataSpd)
        {
            EmailCore.sendEmailNew(
                p1,
               "Informasi Cancel" + p2,
               "InformasiSPDCancelAtasanLangsungOrAtasanTujuanTemplate.txt",
               dataSpd,
               string.Empty,
               string.Empty,
               string.Empty,
               "ApprovalSPDUrl",
               string.Empty
               );
        }

        public static void InformasiSPDPencarianTicketTemplate(string p1, string p2, trSPD dataSpd)
        {

            EmailCore.sendEmailNew(
                      p1,
                      "Informasi Pencarian tiket " + p2,
                      "InformasiSPDPencarianTicketTemplate.txt",
                      dataSpd,
                      string.Empty,
                      string.Empty,
                      string.Empty,
                      "ApprovalSPDUrl",
                       string.Empty
                      );
        }

        public static void InformasiSPDAtasanLangsungOrAtasanTujuanTemplate(string p1, string p2, trSPD dataSpd)
        {

            EmailCore.sendEmailNew(
                p1,
                "Informasi " + p2,
                "InformasiSPDAtasanLangsungOrAtasanTujuanTemplate.txt",
                dataSpd,
                string.Empty,
                string.Empty,
                string.Empty,
                "ApprovalSPDUrl",
                 string.Empty
                );
        }

        public static void ApprovalSPDAtasanTujuanTemplate(string p1, string p2, string p3, trSPD dataSpd)
        {
            EmailCore.sendEmailNew(
                             p1,
                             "Approval " + p2,
                             "ApprovalSPDAtasanTujuanTemplate.txt",
                             dataSpd,
                             string.Empty,
                             string.Empty,
                              string.Empty,
                             "ApprovalSPDUrl",
                              p3
                             );
        }

        public static void InformasiSPDAtasanLangsungOrAtasanTujuanTemplate(string p1, string p2, string p3, trSPD dataSpd)
        {
            EmailCore.sendEmailNew(
                            p1,
                            "Approval " + p2,
                            "InformasiSPDAtasanLangsungOrAtasanTujuanTemplate.txt",
                            dataSpd,
                            string.Empty,
                            string.Empty,
                             string.Empty,
                            "ApprovalSPDUrl",
                             p3
                            );
        }

        public static void ApprovalSPDAtasanLangsungTemplate(string p1, string p2, string p3, trSPD dataSpd)
        {
            EmailCore.sendEmailNew(
                            p1,
                            "Approval " + p2,
                            "ApprovalSPDAtasanLangsungTemplate.txt",
                            dataSpd,
                            string.Empty,
                            string.Empty,
                             string.Empty,
                            "ApprovalSPDUrl",
                             p3
                            );
        }

        #endregion
    }
}
